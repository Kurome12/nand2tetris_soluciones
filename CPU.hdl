// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=instruccionA);
    Not(in=instruccionA, out=instruccionC);
    And(a=instruccionC, b=instruction[5], out=ALUa);
    Mux16(a=instruction, b=resultadoALU, sel=ALUa, out=inputRegistroA);
    Or(a=instruccionA, b=ALUa, out=loadRegistroA);
    ARegister(in=inputRegistroA, load=loadRegistroA, out=outRegistroA);
    Mux16(a=outRegistroA, b=inM, sel=instruction[12], out=inputALUy);
    And(a=instruccionC, b=instruction[4], out=loadRegistroD);
    DRegister(in=resultadoALU, load=loadRegistroD, out=loadRegistroOUT);
    ALU(x=loadRegistroOUT, y=inputALUy,zx=instruction[11], nx=instruction[10],zy=instruction[9], ny=instruction[8],f=instruction[7], no=instruction[6],out=resultadoALU, zr=zr, ng=ng);
    And(a=instruccionC, b=instruction[3], out=writeM);
    Or16(a=false, b=outRegistroA, out[0..14]=addressM);
    Or16(a=false, b=resultadoALU, out=outM);
    And(a=zr, b=instruction[1], out=jmpZR);
    And(a=ng, b=instruction[2], out=jmpNG);
    Or(a=zr, b=ng, out=zrOng);
    Not(in=zrOng, out=notNG);
    And(a=notNG, b=instruction[0], out=jmpNotNG);
    Or(a=jmpZR, b=jmpNG, out=jumpLE);
    Or(a=jumpLE, b=jmpNotNG, out=jmp);
    And(a=instruccionC, b=jmp, out=pcCarga);
    Not(in=pcCarga, out=pcSuma);
    PC(in=outRegistroA, load=pcCarga, inc=pcSuma, reset=reset, out[0..14]=pc);
}